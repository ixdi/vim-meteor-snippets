# Meteor snippets
snippet mth
	Template.${1:template_name}.helpers({
		${2}
	});
snippet mhf
	${1}(${2}) {
		${3}
	};
snippet mte
	Template.${1:template_name}.events({
		${2}
	});
snippet mef
	'${1}'(e, tpl) {
		e.preventDefault();
		${2}
	};
snippet mefd
	'${1}': _.debounce((e, tpl) => {
		e.preventDefault();
		${2}
	}, App.Settings.limitEventTime, true)${3}
snippet mtauto
	self.autorun((c) => {
		${1}
	});
snippet mtf
	self.${1} = (${2}) => {
		${3}
	};
snippet mpub
	Meteor.publish('${1}', function () {
		${2}
	});
snippet msub
	${1}.subscribe('${2}'${3});
snippet mstartup
	Meteor.startup(function () {
		${1}
	});
snippet mrh
	Template.registerHelper('${1}', (${2}) => {
		${3}
	});
snippet mrd
	FlowRouter.route('${1}', {
		name: '${2}',
		action(params, query) {
			'${3}'
		}
	});
snippet mrg
	FlowRouter.go('${1}');
snippet mrp
	FlowRouter.getParam('${1}');
snippet msset
	Session.set('${2:key}', ${3:value})${1}
snippet msget
	Session.get('${2:key}')${1}
snippet mseq
	Session.equals('${2:key}', ${3:value})${1}
snippet mcomm
	/*****************************************************************************/
	/* ${1} */
	/*****************************************************************************/
snippet mauto
	Tracker.autorun((c) => {
		${1}
	});
snippet misc
	if (Meteor.isClient) {
		${1}
	}
snippet miss
	if (Meteor.isServer) {
		${1}
	}
snippet mmt
	Meteor.methods({
	});
snippet mcall
	Meteor.call('${1}', (err) => {
		if (err) { 
			showError(err);
		}
		else {
			${2}
		}
	});
snippet mcol
	${1} = new Mongo.Collection('${2}');
snippet mi18
	i18n.__('${1}')
snippet merr
	throw new Meteor.Error('${1}');
snippet monr
	Template.${1}.onRendered(function() {
	  const self = this;
	  ${2}
	});
snippet monc
	Template.${1}.onCreated(function() {
	  const self = this;
	  ${2}
	});
snippet mond
	Template.${1}.onDestroyed(function() {
	  const self = this;
	  ${2}
	});
snippet mim 
	import { ${1} } from '${2}';
snippet mimd
	import { ${1} } from '/imports/api/definitions.js';
snippet mimh
	import { ${1} } from '/imports/startup/client/hlp-cli-common.js';

# For of loop
snippet forof
	for (let ${1:s} of ${2:sequence}) {
		${3}
	}

# Import
snippet im
	import ${1:foo} from '${2:bar}'

# Export
snippet ex
	export ${1:default} ${2:bar}

snippet ce
	console.error(${1:obj})

snippet cl
	console.log(${1:obj})

snippet foreach
	${1:array}.forEach((${2:item}) => {
		${0}
	})
snippet forof
	for (let ${1:elem} of ${2:obj}) {
		${0}
	}

snippet for
	for (let i = 0 i < ${1:length} i++) {
		${0}
	}
snippet if
	if (${1:condition}) {
		${0}
	}
snippet ife
	if (${1:condition}) {
		${2}
	} else {
		${0}
	}
  
snippet ifei
	if (${1:condition}) {
		${2}
	} else if (${3:condition}) {
		${0}
	}
snippet =>
	(${1}) => ${2}
